<h1>week02-05</h1>
<h1>week06-09</h1>
<h1>week10-14</h1>
<h1>week15-18</h1>
<h4>week02</h4>
<h4>建立倉儲與開近端，以下有影片(開cc字幕)</h4>
<p>1.下載2019fall可攜程式至隨身碟</p>
<p>2. 設定user name和email及proxy</p>
<p>3. git clone 個人github倉儲</p>
<p>4. 利用submodule指令設定cmsimde</p>
<p>5. 設定flask_cors</p>
<p>6. 利用cmsimde python wsgi.py 開啟近端</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/b9afO4xBZfs" width="560"></iframe></p>
<h4>Week03</h4>
<h4>編譯Slovespace，以下有影片(開cc字幕)</h4>
<p>1. 將 Y:\portablegit\bin\sh.exe 改名為 sh_rename_for_solvespace.exe</p>
<p>2. 查驗 git 版本在 2.13 以上，即可使用 git clone --recurse-submodules 指令取得所有子模組資料</p>
<p>3. 將CMakeLists line 713 and 714 前面加上 #</p>
<p>4. 手動進行 libpng.dll.a 的編譯，並且改名為 libpng_static.a 後放到Y槽的 lib 目錄</p>
<p>5. 回到 solvespace 目錄， 建立 build 目錄後進入 build 目錄，執行以下兩行程式</p>
<p>cmake .. -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release<br/>mingw32-make</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/sRQkXMsOqOE" width="560"></iframe></p>
<h4>Week04</h4>
<p>跟上week02與week03的進度</p>
<h4><span>Week05</span></h4>
<h4>Slovespace 操作，以下有影片(開cc字幕)</h4>
<p><span>1.  solvespace進行零組件繪製</span></p>
<p><span>2.  每人分別選擇要繪製之零組件</span></p>
<p><span>3.  利用solvespace進行繪製</span></p>
<p><span><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/Osbtpl47EsY" width="560"></iframe></span></p>
<h4>week06</h4>
<h4><span>Solvespace 繪製，以下是影片(開cc字幕)</span></h4>
<p><span>1.  <span>利用 Solvespace 繪製雙輪車所需要的零組件</span></span></p>
<p><span><span>2.  首先繪製自走車之輪子</span></span></p>
<p><span><span>3.  繪製自走車本體</span></span></p>
<p><span><span>4.  開新檔組裝自走車本體與輪子</span></span></p>
<p><span><span><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/bqd2tKedOQ0" width="560"></iframe></span></span></p>
<h4><span>V-rep 模型控制，以下有影片(開cc字幕)</span></h4>
<p><span>1.<span><span> 下載<span>V-rep 3.6.1 rev4 與 web_vrep2.zip(local)</span></span></span></span></p>
<p><span><span><span><span>2.  開啟V-rep 3.6.1 rev4裡的vrep.exe後開啟 web_vrep2裡的two_wheeler.ttt</span></span></span></span></p>
<p><span><span>3.  利用小白框開啟web_vrep2裡的app.py以開啟localhost:5000</span></span></p>
<p><span><span>4.  利用localhost:5000操控小車轉向與速度</span></span></p>
<p><span><span>5.  web_vrep2裡沒有remoteApi.dll檔的話，要到V-rep 3.6.1 rev4找到programming裡</span></span></p>
<p><span><span>remoteApiBindings裡lib裡Windows裡64bit裡複製到web_vrep2，才可使用app.py開</span></span></p>
<p><span><span>啟localhost:5000操控小車</span></span></p>
<p><span><span><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/5ZkijUQDTAc" width="560"></iframe></span></span></p>
<h4><span>新增啟動與停止按鈕，以下是影片(開cc字幕)</span></h4>
<p><span>1.  首先開啟 wed_vrep2 資料夾裡tempate資料夾的controls進編輯器</span></p>
<p><span>2.  利用原有按鈕的程式進行複製修改，新增啟動及停止的按鈕</span></p>
<p><span>3. 接著拉wed_vrep2 資料夾裡的 vrep_linefollower.py檔進編輯器</span></p>
<p><span>4. 在 def to direction 下加上 if direction == 'start': 後打上vrep.simxStartSimulation(self.clientID, vrep.simx_opmode_oneshot)  定義開始按鈕</span></p>
<p><span>5. 接著打上  elif direction == 'stop':<br/>vrep.simxStopSimulation(self.clientID, vrep.simx_opmode_oneshot) 定義停止按鈕</span></p>
<p><span>6.  後續打上else :  並排列好順序</span></p>
<p><span>7. 利用 app.py 開啟 localhost:5000 </span></p>
<p><span>8. 打開vrep 導入雙輪車，利用   localhost:5000  進行開始與停止操控</span></p>
<p><span><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/9zgR51-knq4" width="560"></iframe></span></p>
<p><span></span></p>
<h1>About</h1>
<p>此內容管理系統以 <a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> 作為 submodule 運作, 可以選定對應的版本運作, cmsimde 可以持續改版, 不會影響之前設為 submodule, 使用舊版 cmsimde 模組的內容管理相關運作.</p>
<h4>利用 cmsimde 建立靜態網誌方法:</h4>
<p>1. 在 github 建立倉儲, git clone 到近端</p>
<p>2. 參考 <a href="https://github.com/mdecourse/newcms">https://github.com/mdecourse/newcms</a>, 加入除了 cmsimde 目錄外的所有內容</p>
<p>以 git submodule add <a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> cmsimde</p>
<p>建立 cmsimde 目錄, 並從 github 取下子模組內容.</p>
<p>3.在近端維護時, 更換目錄到倉儲中的 cmsimde, 以 python wsgi.py 啟動近端網際伺服器.</p>
<p>動態內容編輯完成後, 以 generate_pages 轉為靜態內容, 以 git add commit 及 push 將內容推到遠端.</p>
<p>4. 之後若要以 git clone 取下包含 submodule 的所有內容, 執行:</p>
<p>git clone --recurse-submodules <a href="https://github.com/mdecourse/newcms.git">https://github.com/mdecourse/newcms.git</a></p>
<h1>Develop</h1>
<p><a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> 的開發, 可以在一個目錄中放入 cmsimde, 然後將 up_dir 中的內容放到與 cmsimde 目錄同位階的地方, 使用 command 進入 cmsimde 目錄, 執行 python wsgi.py, 就可以啟動, 以瀏覽器 https://localhost:9443 就可以連接, 以 admin 作為管理者密碼, 就可以登入維護內容.</p>
<p>cmsimde 的開發採用 Leo Editor, 開啟 cmsimde 目錄中的 cmsimde.leo 就可以進行程式修改, 結束後, 若要保留網際內容, 只要將 cmsimde 外部的內容倒回 up_dir 目錄中即可後續對 cmsimde 遠端倉儲進行改版.</p>
<p>init.py 位於  up_dir 目錄, 可以設定 site_title 與 uwsgi 等變數.</p>